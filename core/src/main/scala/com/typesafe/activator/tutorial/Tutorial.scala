package com.typesafe.activator.tutorial

import java.io.File

object Tutorial {

  sealed trait TutorialPart
  case class EditScriptPart(filename: String, script: List[EditScript.EditCommand]) extends TutorialPart
  case class ShellCommand(command: String) extends TutorialPart
  case class Raw(content: String) extends TutorialPart

  private val EditScriptStart = """^<<(.*)>>=\s*$""".r
  private val Shell = """^@@\s*(.*)$""".r

  def parseTutorial(tutorial: List[String]): List[TutorialPart] = {
    tutorial match {
      case Nil => Nil
      case EditScriptStart(filename) :: tail =>
        val (script, remaining) = tail.span(_ != "@")
        EditScriptPart(filename, EditScript.parseEditScript(script)) :: parseTutorial(remaining.drop(1))
      case Shell(command) :: tail =>
        ShellCommand(command) :: parseTutorial(tail)
      case other :: tail =>
        Raw(other) :: parseTutorial(tail)
    }
  }

  private def readFile(file: File): List[String] = {
    import java.io._
    val is = new FileInputStream(file)
    try {
      val reader = new BufferedReader(new InputStreamReader(is, "UTF-8"))
      var lines = List.empty[String]
      var line = reader.readLine()
      while (line != null) {
        lines = line :: lines
        line = reader.readLine()
      }
      lines.reverse
    } finally {
      is.close()
    }
  }

  private def writeFile(file: File, content: String): Unit = {
    import java.io._
    val os = new FileOutputStream(file)
    try {
      val writer = new OutputStreamWriter(os)
      writer.write(content)
      writer.flush()
    } finally {
      os.close()
    }
  }

  private def runEditScript(editScript: EditScriptPart, baseDir: File, logger: String => Unit) = {
    logger("Running edit script on file: " + editScript.filename)

    val file = new File(baseDir, editScript.filename)
    val lines = if (file.exists()) {
      readFile(file)
    } else Nil
    writeFile(file, EditScript.runEditScript(editScript.script, lines, editScript.filename).mkString("\n"))
  }

  /**
   * Run the given tutorial on the given base directory
   */
  def runTutorial(tutorial: List[TutorialPart], baseDir: File, commandRunner: String => Unit, logger: String => Unit) = {
    tutorial.foreach {
      case edit: EditScriptPart => runEditScript(edit, baseDir, logger)
      case shell: ShellCommand => commandRunner(shell.command)
      case _ => ()
    }
  }

  /**
   * Format the tutorial as an HTML file
   */
  def formatTutorial(tutorial: List[TutorialPart], source: File): String = {
    val out = new StringBuilder()
    out.append(s"<!-- DO NOT EDIT THIS FILE, IT IS GENERATED FROM ${source.getName} -->\n")
    tutorial.foreach {
      case edit: EditScriptPart => EditScript.formatEditScript(out, edit.filename, edit.script)
      case Raw(content) => out.append(content).append("\n")
      case _ => ()
    }
    out.toString()
  }
}
